=head1 OVERVIEW

This is a graphics plotting front-end for PDL.  It is intended to
implement minimal plotting functionality by dispatching plot calls to
a relevant, working plot library. 

=cut

=head1 NAME

PDL::Graphics::Simple - Simple backend-independent plotting for PDL

=head1 SYNOPSIS
 
 TBD

=head1 DESCRIPTION

PDL can plot through a plethora of external plotting modules.  Each
module tends to be less widely available than Perl itself, and to
require an additional step or two to install.  For simple applications 
("throw up an image on the screen", or "plot a curve") it is useful to 
have a subset of all plotting capability available in a backend-independent
layer.  PDL::Graphics::Simple provides that capability.

PDL::Graphics::Simple defines an object that represents a plotting
window/interface.  When you construct the object, you can either specify a 
backend or allow PDL::Graphics::Simple to find a backend that seems to work 
on your system.  Subsequent plotting commands are translated and passed
through to your chosen plotting module.

Only a small subset of PDL's graphics functionality is supported --
PDL::Graphics::Simple is intended for quick monkeying around with data 
or for demos or other applications where platform independence is more
important than configurability, plot quality, or speed.

Only 2-D plotting is supported.  For 3-D plotting, use PDL::Graphics::Gnuplot
or PDL::Graphics::Trid directly.

=head1 SUPPORTED BACKENDS

PDL::Graphics::Simple supports:

=over 3

=item Gnuplot (via PDL::Graphics::Gnuplot)

=item PGPLOT  (via PDL::Graphics::PGPLOT::Window)

=item PLplot (via PDL::Graphics::PLplot)

=item Prima (via PDL::Graphics::Prima).

=back

=head1 FUNCTIONS

(More to come RSN)

=cut
=head2 show

=for usage

 PDL::Graphics::Simple::show

=for ref

C<show> lists the supported engines and a one-line synopsis of each.

=cut
=head2 new 

=for usage

 $w = new PDL::Graphics::Simple( %opts );

=for ref

c<new> is the main constructor for PDL::Graphics::Simple.  It accepts a list of options
about the type of window you want:

=over 3

=item engine

If specified, this must be one of the supported plotting engines.  You can use a module
name or the shortened name.  If you don't give one, the constructor will scan through existing
modules and pick one that seems to work.

=item size

This is a window size as an ARRAY ref containing [width, height,
units].  If no units are specified, the default should be "pixels",
using the standard conversions of 72 points per inch, 100 pixels per
inch.

=item type

This describes the kind of plot to create. The default is
"interactive" if neither type nor output are specified, and should
result in a plot being displayed (e.g. via X11 or the engine's default
display method). If the output is specified and appears to be a qualified
graphics filename (i.e. has a dot-extension with 2-4 characters at the end)
the default is 'f'.

Accepted values are "interactive" and "file", which can be abbreviated
to 'i' and 'f'.

=item output

This should be a window number for interactive plots, or a file name
for file plots.  The default file name is "plot.png" in the current
working directory.  Individual plotting modules are meant to support
at least '.png', '.pdf', and '.ps', if necessary via format conversion.
Most other standard file types are supported but are not guaranteed to work.

=back

=cut
=head2 plot

=for usage

 $w = new PDL::Graphics::Simple ( %opts );
 $w->plot($data);

=for ref

C<plot> plots zero or more traces of data on a graph.  It accepts two kinds of
options: plot options that affect the whole plot, and curve options
that affect each curve.  The arguments are divided into "curve blocks", each
of which contains a curve options hash followed by data.  

If the last argument is a hash ref, it is always treated as plot options.
If the first and second arguments are both hash refs, then the first argument
is treated as plot options and the second as curve options for the first curve
block.

=head3 Plot options:

=over 3

=item oplot

If this is set, then the plot overplots a previous plot.

=item title

If this is set, it is a title for the plot as a whole.

=item xlabel

If this is set, it is a title for the X axis.

=item ylabel

If this is set, it is a title for the Y axis.

=item key

TBD

=item xrange

If this is set, it is a two-element ARRAY ref containing a range for the X axis.

=item yrange

If this is set, it is a two-element ARRAY ref containing a range for the Y axis.

=back

=head3 Curve options:

=over 3

=item with

This names the type of curve to be plotted.  See below for supported curve types.

=item legend

This gives a name for the following curve, to be placed in a master plot legend.

=back

=head3 Curve types supported

=over 3

=item lines

This is a simple line plot. It takes 1 or 2 columns of data.

=item points

This is a simple point plot.  It takes 1 or 2 columns of data.

=item image

This is a monochrome or RGB image.  It takes a 2-D or 3-D array of values, as
(width x height x color-index).

=back

=cut
=head1 Internals

PDL::Graphics::Simple defines several subclasses that implement the
individual interfaces.  The subclasses are very simple and inherit
only a collection of stubroutines that die with a "not implemented"
message -- i.e. they are expected to contain a minimum set of methods
on their own.

Argument parsing and defaults are handled by the main
PDL::Graphics::Simple class; actual plot commands are dispatched in a
regularized form to the appropriate subclasses.  The subclasses are
responsible for converting the regularized parameters to plot calls 
in the form expected by their corresponding plot modules.

=head2 Interface subclass methods

Each interface module supports the following methods:

=cut
=head3 check 

C<check> attempts to load the relevant engine module and test that it
is working.  It registers its success or failure in the main $mods
hash, under the "ok" flag.  If there is a failure that generates an
error message, the error is logged under the "msg" flag.

C<check> accepts one parameter, "force".  If it is missing or false,
and "ok" is defined, check just echoes the prior result.  If it is
true, then check actually checks the status regardless of the "ok"
flag.

=head3 new

C<new> creates and returns an appropriate plot object, or dies on
failure.

Each C<new> method should accept the following options, defined as in 
the description for PDL::Graphics::Simple::new (above).  There is 
no need to set default values as all argument should be set to 
reasonable values by the superclass. 

Required options: C<size>, C<type>, C<output>. 

=head3 plot

C<plot> generates a plot.  It should accept a standardized collection of
options as generated by the PDL::Graphics::Simple plot method: standard
plot options as a hash ref, followed by a list of curve blocks.  Each
curve block consists of an ARRAY ref with a hash in the 0 element and
all required data in the following elements, one PDL per (ordinate/abscissa).
For 1-D plot types (like points and lines) the PDLs must be 1D.  For image
plot types the lone PDL must be 2D (monochrome) or 3D(RGB).

=cut
=head1 REPOSITORY

L<https:/github.com/drzowie/PDL-Graphics-Simple>

=head1 AUTHOR

Craig DeForest, C<< <craig@deforest.org> >>


=head1 LICENSE AND COPYRIGHT

Copyright 2012 Craig DeForest

This program is free software; you can redistribute it and/or modify
it under the terms of either: the Gnu General Public License v2 as
published by the Free Software Foundation; or the Perl Artistic
License included with the Perl language.

see http://dev.perl.org/licenses/ for more information.

=cut
